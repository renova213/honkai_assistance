// Mocks generated by Mockito 5.3.2 from annotations
// in honkai_lab/test/data/datasources/honkai_lab_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:honkai_lab/data/datasources/honkai_lab_remote_data_sources.dart'
    as _i3;
import 'package:honkai_lab/data/models/activecode_model.dart' as _i5;
import 'package:honkai_lab/data/models/banner_character_model.dart' as _i8;
import 'package:honkai_lab/data/models/changelog_model.dart' as _i2;
import 'package:honkai_lab/data/models/character_model.dart' as _i11;
import 'package:honkai_lab/data/models/elf_banner_model.dart' as _i9;
import 'package:honkai_lab/data/models/event_honkai_model.dart' as _i6;
import 'package:honkai_lab/data/models/latest_update_model.dart' as _i7;
import 'package:honkai_lab/data/models/weapon_stigma_banner_model.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChangelogModel_0 extends _i1.SmartFake
    implements _i2.ChangelogModel {
  _FakeChangelogModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HonkaiLabRemoteDataSourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockHonkaiLabRemoteDataSourceImpl extends _i1.Mock
    implements _i3.HonkaiLabRemoteDataSourceImpl {
  MockHonkaiLabRemoteDataSourceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.ActiveCodeModel>> getActiveCodes(
          String? collectionName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveCodes,
          [collectionName],
        ),
        returnValue: _i4.Future<List<_i5.ActiveCodeModel>>.value(
            <_i5.ActiveCodeModel>[]),
      ) as _i4.Future<List<_i5.ActiveCodeModel>>);
  @override
  _i4.Future<List<_i6.EventHonkaiModel>> getEventHonkai(
          String? collectionName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEventHonkai,
          [collectionName],
        ),
        returnValue: _i4.Future<List<_i6.EventHonkaiModel>>.value(
            <_i6.EventHonkaiModel>[]),
      ) as _i4.Future<List<_i6.EventHonkaiModel>>);
  @override
  _i4.Future<List<_i7.LatestUpdateModel>> getLastUpdate(
          String? collectionName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastUpdate,
          [collectionName],
        ),
        returnValue: _i4.Future<List<_i7.LatestUpdateModel>>.value(
            <_i7.LatestUpdateModel>[]),
      ) as _i4.Future<List<_i7.LatestUpdateModel>>);
  @override
  _i4.Future<List<_i8.BannerCharacterModel>> getBannerCharacter(
          String? collectionName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBannerCharacter,
          [collectionName],
        ),
        returnValue: _i4.Future<List<_i8.BannerCharacterModel>>.value(
            <_i8.BannerCharacterModel>[]),
      ) as _i4.Future<List<_i8.BannerCharacterModel>>);
  @override
  _i4.Future<List<_i9.ElfBannerModel>> getElfBanner(String? collectionName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getElfBanner,
          [collectionName],
        ),
        returnValue:
            _i4.Future<List<_i9.ElfBannerModel>>.value(<_i9.ElfBannerModel>[]),
      ) as _i4.Future<List<_i9.ElfBannerModel>>);
  @override
  _i4.Future<List<_i10.WeaponStigmaBannerModel>> getWeaponStigmaBanner(
          String? collectionName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeaponStigmaBanner,
          [collectionName],
        ),
        returnValue: _i4.Future<List<_i10.WeaponStigmaBannerModel>>.value(
            <_i10.WeaponStigmaBannerModel>[]),
      ) as _i4.Future<List<_i10.WeaponStigmaBannerModel>>);
  @override
  _i4.Future<List<_i11.CharacterModel>> getCharacter(String? collectionName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCharacter,
          [collectionName],
        ),
        returnValue: _i4.Future<List<_i11.CharacterModel>>.value(
            <_i11.CharacterModel>[]),
      ) as _i4.Future<List<_i11.CharacterModel>>);
  @override
  _i4.Future<_i2.ChangelogModel> getChangelog(String? collectionName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChangelog,
          [collectionName],
        ),
        returnValue: _i4.Future<_i2.ChangelogModel>.value(_FakeChangelogModel_0(
          this,
          Invocation.method(
            #getChangelog,
            [collectionName],
          ),
        )),
      ) as _i4.Future<_i2.ChangelogModel>);
}
